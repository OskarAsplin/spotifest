/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as WithProtectedLayoutRouteImport } from './routes/_withProtectedLayout'
import { Route as WithLayoutRouteImport } from './routes/_withLayout'
import { Route as WithProtectedLayoutIndexRouteImport } from './routes/_withProtectedLayout/index'
import { Route as WithProtectedLayoutShareIndexRouteImport } from './routes/_withProtectedLayout/share/index'
import { Route as WithLayoutAboutIndexRouteImport } from './routes/_withLayout/about/index'
import { Route as WithProtectedLayoutShareMatchBasisRouteImport } from './routes/_withProtectedLayout/share/$matchBasis'
import { Route as WithLayoutFestivalFestivalIdRouteImport } from './routes/_withLayout/festival/$festivalId'
import { Route as WithLayoutArtistArtistIdRouteImport } from './routes/_withLayout/artist/$artistId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const WithProtectedLayoutRoute = WithProtectedLayoutRouteImport.update({
  id: '/_withProtectedLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const WithLayoutRoute = WithLayoutRouteImport.update({
  id: '/_withLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const WithProtectedLayoutIndexRoute =
  WithProtectedLayoutIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => WithProtectedLayoutRoute,
  } as any)
const WithProtectedLayoutShareIndexRoute =
  WithProtectedLayoutShareIndexRouteImport.update({
    id: '/share/',
    path: '/share/',
    getParentRoute: () => WithProtectedLayoutRoute,
  } as any)
const WithLayoutAboutIndexRoute = WithLayoutAboutIndexRouteImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => WithLayoutRoute,
} as any)
const WithProtectedLayoutShareMatchBasisRoute =
  WithProtectedLayoutShareMatchBasisRouteImport.update({
    id: '/share/$matchBasis',
    path: '/share/$matchBasis',
    getParentRoute: () => WithProtectedLayoutRoute,
  } as any)
const WithLayoutFestivalFestivalIdRoute =
  WithLayoutFestivalFestivalIdRouteImport.update({
    id: '/festival/$festivalId',
    path: '/festival/$festivalId',
    getParentRoute: () => WithLayoutRoute,
  } as any)
const WithLayoutArtistArtistIdRoute =
  WithLayoutArtistArtistIdRouteImport.update({
    id: '/artist/$artistId',
    path: '/artist/$artistId',
    getParentRoute: () => WithLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '': typeof WithProtectedLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/': typeof WithProtectedLayoutIndexRoute
  '/artist/$artistId': typeof WithLayoutArtistArtistIdRoute
  '/festival/$festivalId': typeof WithLayoutFestivalFestivalIdRoute
  '/share/$matchBasis': typeof WithProtectedLayoutShareMatchBasisRoute
  '/about': typeof WithLayoutAboutIndexRoute
  '/share': typeof WithProtectedLayoutShareIndexRoute
}
export interface FileRoutesByTo {
  '': typeof WithLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/': typeof WithProtectedLayoutIndexRoute
  '/artist/$artistId': typeof WithLayoutArtistArtistIdRoute
  '/festival/$festivalId': typeof WithLayoutFestivalFestivalIdRoute
  '/share/$matchBasis': typeof WithProtectedLayoutShareMatchBasisRoute
  '/about': typeof WithLayoutAboutIndexRoute
  '/share': typeof WithProtectedLayoutShareIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_withLayout': typeof WithLayoutRouteWithChildren
  '/_withProtectedLayout': typeof WithProtectedLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_withProtectedLayout/': typeof WithProtectedLayoutIndexRoute
  '/_withLayout/artist/$artistId': typeof WithLayoutArtistArtistIdRoute
  '/_withLayout/festival/$festivalId': typeof WithLayoutFestivalFestivalIdRoute
  '/_withProtectedLayout/share/$matchBasis': typeof WithProtectedLayoutShareMatchBasisRoute
  '/_withLayout/about/': typeof WithLayoutAboutIndexRoute
  '/_withProtectedLayout/share/': typeof WithProtectedLayoutShareIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/'
    | '/artist/$artistId'
    | '/festival/$festivalId'
    | '/share/$matchBasis'
    | '/about'
    | '/share'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/login'
    | '/'
    | '/artist/$artistId'
    | '/festival/$festivalId'
    | '/share/$matchBasis'
    | '/about'
    | '/share'
  id:
    | '__root__'
    | '/_withLayout'
    | '/_withProtectedLayout'
    | '/login'
    | '/_withProtectedLayout/'
    | '/_withLayout/artist/$artistId'
    | '/_withLayout/festival/$festivalId'
    | '/_withProtectedLayout/share/$matchBasis'
    | '/_withLayout/about/'
    | '/_withProtectedLayout/share/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  WithLayoutRoute: typeof WithLayoutRouteWithChildren
  WithProtectedLayoutRoute: typeof WithProtectedLayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_withProtectedLayout': {
      id: '/_withProtectedLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof WithProtectedLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_withLayout': {
      id: '/_withLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof WithLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_withProtectedLayout/': {
      id: '/_withProtectedLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof WithProtectedLayoutIndexRouteImport
      parentRoute: typeof WithProtectedLayoutRoute
    }
    '/_withProtectedLayout/share/': {
      id: '/_withProtectedLayout/share/'
      path: '/share'
      fullPath: '/share'
      preLoaderRoute: typeof WithProtectedLayoutShareIndexRouteImport
      parentRoute: typeof WithProtectedLayoutRoute
    }
    '/_withLayout/about/': {
      id: '/_withLayout/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof WithLayoutAboutIndexRouteImport
      parentRoute: typeof WithLayoutRoute
    }
    '/_withProtectedLayout/share/$matchBasis': {
      id: '/_withProtectedLayout/share/$matchBasis'
      path: '/share/$matchBasis'
      fullPath: '/share/$matchBasis'
      preLoaderRoute: typeof WithProtectedLayoutShareMatchBasisRouteImport
      parentRoute: typeof WithProtectedLayoutRoute
    }
    '/_withLayout/festival/$festivalId': {
      id: '/_withLayout/festival/$festivalId'
      path: '/festival/$festivalId'
      fullPath: '/festival/$festivalId'
      preLoaderRoute: typeof WithLayoutFestivalFestivalIdRouteImport
      parentRoute: typeof WithLayoutRoute
    }
    '/_withLayout/artist/$artistId': {
      id: '/_withLayout/artist/$artistId'
      path: '/artist/$artistId'
      fullPath: '/artist/$artistId'
      preLoaderRoute: typeof WithLayoutArtistArtistIdRouteImport
      parentRoute: typeof WithLayoutRoute
    }
  }
}

interface WithLayoutRouteChildren {
  WithLayoutArtistArtistIdRoute: typeof WithLayoutArtistArtistIdRoute
  WithLayoutFestivalFestivalIdRoute: typeof WithLayoutFestivalFestivalIdRoute
  WithLayoutAboutIndexRoute: typeof WithLayoutAboutIndexRoute
}

const WithLayoutRouteChildren: WithLayoutRouteChildren = {
  WithLayoutArtistArtistIdRoute: WithLayoutArtistArtistIdRoute,
  WithLayoutFestivalFestivalIdRoute: WithLayoutFestivalFestivalIdRoute,
  WithLayoutAboutIndexRoute: WithLayoutAboutIndexRoute,
}

const WithLayoutRouteWithChildren = WithLayoutRoute._addFileChildren(
  WithLayoutRouteChildren,
)

interface WithProtectedLayoutRouteChildren {
  WithProtectedLayoutIndexRoute: typeof WithProtectedLayoutIndexRoute
  WithProtectedLayoutShareMatchBasisRoute: typeof WithProtectedLayoutShareMatchBasisRoute
  WithProtectedLayoutShareIndexRoute: typeof WithProtectedLayoutShareIndexRoute
}

const WithProtectedLayoutRouteChildren: WithProtectedLayoutRouteChildren = {
  WithProtectedLayoutIndexRoute: WithProtectedLayoutIndexRoute,
  WithProtectedLayoutShareMatchBasisRoute:
    WithProtectedLayoutShareMatchBasisRoute,
  WithProtectedLayoutShareIndexRoute: WithProtectedLayoutShareIndexRoute,
}

const WithProtectedLayoutRouteWithChildren =
  WithProtectedLayoutRoute._addFileChildren(WithProtectedLayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  WithLayoutRoute: WithLayoutRouteWithChildren,
  WithProtectedLayoutRoute: WithProtectedLayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
